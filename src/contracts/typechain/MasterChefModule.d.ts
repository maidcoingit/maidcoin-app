/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterChefModuleInterface extends ethers.utils.Interface {
  functions: {
    "accSushiPerShare()": FunctionFragment;
    "lpToken()": FunctionFragment;
    "masterChefPid()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setSushiMasterChef(address,uint256)": FunctionFragment;
    "sushi()": FunctionFragment;
    "sushiLastRewardBlock()": FunctionFragment;
    "sushiMasterChef()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accSushiPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "masterChefPid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setSushiMasterChef",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sushi", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sushiLastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sushiMasterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accSushiPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterChefPid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSushiMasterChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sushi", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sushiLastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiMasterChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class MasterChefModule extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterChefModuleInterface;

  functions: {
    accSushiPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "accSushiPerShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpToken(overrides?: CallOverrides): Promise<[string]>;

    "lpToken()"(overrides?: CallOverrides): Promise<[string]>;

    masterChefPid(overrides?: CallOverrides): Promise<[BigNumber]>;

    "masterChefPid()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setSushiMasterChef(
      _masterChef: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSushiMasterChef(address,uint256)"(
      _masterChef: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sushi(overrides?: CallOverrides): Promise<[string]>;

    "sushi()"(overrides?: CallOverrides): Promise<[string]>;

    sushiLastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "sushiLastRewardBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    sushiMasterChef(overrides?: CallOverrides): Promise<[string]>;

    "sushiMasterChef()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  accSushiPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  "accSushiPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  lpToken(overrides?: CallOverrides): Promise<string>;

  "lpToken()"(overrides?: CallOverrides): Promise<string>;

  masterChefPid(overrides?: CallOverrides): Promise<BigNumber>;

  "masterChefPid()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setSushiMasterChef(
    _masterChef: string,
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSushiMasterChef(address,uint256)"(
    _masterChef: string,
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sushi(overrides?: CallOverrides): Promise<string>;

  "sushi()"(overrides?: CallOverrides): Promise<string>;

  sushiLastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "sushiLastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  sushiMasterChef(overrides?: CallOverrides): Promise<string>;

  "sushiMasterChef()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    accSushiPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accSushiPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<string>;

    "lpToken()"(overrides?: CallOverrides): Promise<string>;

    masterChefPid(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChefPid()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setSushiMasterChef(
      _masterChef: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSushiMasterChef(address,uint256)"(
      _masterChef: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sushi(overrides?: CallOverrides): Promise<string>;

    "sushi()"(overrides?: CallOverrides): Promise<string>;

    sushiLastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiLastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    sushiMasterChef(overrides?: CallOverrides): Promise<string>;

    "sushiMasterChef()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    accSushiPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    "accSushiPerShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    lpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    masterChefPid(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChefPid()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setSushiMasterChef(
      _masterChef: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSushiMasterChef(address,uint256)"(
      _masterChef: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sushi(overrides?: CallOverrides): Promise<BigNumber>;

    "sushi()"(overrides?: CallOverrides): Promise<BigNumber>;

    sushiLastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiLastRewardBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    sushiMasterChef(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiMasterChef()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accSushiPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accSushiPerShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    masterChefPid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterChefPid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setSushiMasterChef(
      _masterChef: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSushiMasterChef(address,uint256)"(
      _masterChef: string,
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sushi(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sushi()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sushiLastRewardBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sushiLastRewardBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sushiMasterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sushiMasterChef()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
