/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IMaidCafeInterface extends ethers.utils.Interface {
  functions: {
    "enter(uint256)": FunctionFragment;
    "enterWithPermit(uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "leave(uint256)": FunctionFragment;
    "maidCoin()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "enter", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "enterWithPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "leave", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "maidCoin", values?: undefined): string;

  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maidCoin", data: BytesLike): Result;

  events: {
    "Enter(address,uint256)": EventFragment;
    "Leave(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Enter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Leave"): EventFragment;
}

export class IMaidCafe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IMaidCafeInterface;

  functions: {
    enter(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enter(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enterWithPermit(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enterWithPermit(uint256,uint256,uint8,bytes32,bytes32)"(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "leave(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maidCoin(overrides?: CallOverrides): Promise<[string]>;

    "maidCoin()"(overrides?: CallOverrides): Promise<[string]>;
  };

  enter(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enter(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enterWithPermit(
    _amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enterWithPermit(uint256,uint256,uint8,bytes32,bytes32)"(
    _amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  leave(
    _share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "leave(uint256)"(
    _share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maidCoin(overrides?: CallOverrides): Promise<string>;

  "maidCoin()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    enter(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "enter(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterWithPermit(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "enterWithPermit(uint256,uint256,uint8,bytes32,bytes32)"(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    leave(_share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "leave(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    maidCoin(overrides?: CallOverrides): Promise<string>;

    "maidCoin()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Enter(user: string | null, amount: null): EventFilter;

    Leave(user: string | null, share: null): EventFilter;
  };

  estimateGas: {
    enter(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "enter(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enterWithPermit(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enterWithPermit(uint256,uint256,uint8,bytes32,bytes32)"(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    leave(_share: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "leave(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maidCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "maidCoin()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    enter(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enter(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enterWithPermit(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enterWithPermit(uint256,uint256,uint8,bytes32,bytes32)"(
      _amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "leave(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maidCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maidCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
