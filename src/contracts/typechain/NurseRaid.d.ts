/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NurseRaidInterface extends ethers.utils.Interface {
  functions: {
    "approveMaids(address)": FunctionFragment;
    "challengers(uint256,address)": FunctionFragment;
    "changeMaidPowerToRaidReducedBlock(uint256)": FunctionFragment;
    "changeRNG(address)": FunctionFragment;
    "checkDone(uint256)": FunctionFragment;
    "create(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "disapproveMaids(address)": FunctionFragment;
    "enter(uint256,address,uint256)": FunctionFragment;
    "enterWithPermitAll(uint256,address,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "exit(uint256)": FunctionFragment;
    "maidCafe()": FunctionFragment;
    "maidCoin()": FunctionFragment;
    "maidPowerToRaidReducedBlock()": FunctionFragment;
    "maidsApproved(address)": FunctionFragment;
    "nursePart()": FunctionFragment;
    "owner()": FunctionFragment;
    "raidCount()": FunctionFragment;
    "raids(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rng()": FunctionFragment;
    "setMaidCafe(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveMaids",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "challengers",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMaidPowerToRaidReducedBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeRNG", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkDone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disapproveMaids",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enter",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "enterWithPermitAll",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "maidCafe", values?: undefined): string;
  encodeFunctionData(functionFragment: "maidCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maidPowerToRaidReducedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maidsApproved",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "nursePart", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "raidCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "raids", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rng", values?: undefined): string;
  encodeFunctionData(functionFragment: "setMaidCafe", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveMaids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "challengers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMaidPowerToRaidReducedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeRNG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checkDone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disapproveMaids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterWithPermitAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maidCafe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maidCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maidPowerToRaidReducedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maidsApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nursePart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raidCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "raids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rng", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaidCafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ChangeMaidPowerToRaidReducedBlock(uint256)": EventFragment;
    "Create(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Enter(address,uint256,address,uint256)": EventFragment;
    "Exit(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "ChangeMaidPowerToRaidReducedBlock"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Create"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Enter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class NurseRaid extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NurseRaidInterface;

  functions: {
    approveMaids(
      maids: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveMaids(address)"(
      maids: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    challengers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        enterBlock: BigNumber;
        maids: string;
        maidId: BigNumber;
      }
    >;

    "challengers(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        enterBlock: BigNumber;
        maids: string;
        maidId: BigNumber;
      }
    >;

    changeMaidPowerToRaidReducedBlock(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeMaidPowerToRaidReducedBlock(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeRNG(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeRNG(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkDone(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    "checkDone(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    create(
      entranceFee: BigNumberish,
      _nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "create(uint256,uint256,uint256,uint256,uint256)"(
      entranceFee: BigNumberish,
      _nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    disapproveMaids(
      maids: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disapproveMaids(address)"(
      maids: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enter(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enter(uint256,address,uint256)"(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    enterWithPermitAll(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enterWithPermitAll(uint256,address,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exit(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

    "exit(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    maidCafe(overrides?: CallOverrides): Promise<[string]>;

    "maidCafe()"(overrides?: CallOverrides): Promise<[string]>;

    maidCoin(overrides?: CallOverrides): Promise<[string]>;

    "maidCoin()"(overrides?: CallOverrides): Promise<[string]>;

    maidPowerToRaidReducedBlock(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "maidPowerToRaidReducedBlock()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maidsApproved(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "maidsApproved(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nursePart(overrides?: CallOverrides): Promise<[string]>;

    "nursePart()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    raidCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "raidCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    raids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        entranceFee: BigNumber;
        nursePart: BigNumber;
        maxRewardCount: BigNumber;
        duration: BigNumber;
        endBlock: BigNumber;
      }
    >;

    "raids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        entranceFee: BigNumber;
        nursePart: BigNumber;
        maxRewardCount: BigNumber;
        duration: BigNumber;
        endBlock: BigNumber;
      }
    >;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rng(overrides?: CallOverrides): Promise<[string]>;

    "rng()"(overrides?: CallOverrides): Promise<[string]>;

    setMaidCafe(
      _maidCafe: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaidCafe(address)"(
      _maidCafe: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  approveMaids(
    maids: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveMaids(address)"(
    maids: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  challengers(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      enterBlock: BigNumber;
      maids: string;
      maidId: BigNumber;
    }
  >;

  "challengers(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      enterBlock: BigNumber;
      maids: string;
      maidId: BigNumber;
    }
  >;

  changeMaidPowerToRaidReducedBlock(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeMaidPowerToRaidReducedBlock(uint256)"(
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeRNG(addr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "changeRNG(address)"(
    addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkDone(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "checkDone(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  create(
    entranceFee: BigNumberish,
    _nursePart: BigNumberish,
    maxRewardCount: BigNumberish,
    duration: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "create(uint256,uint256,uint256,uint256,uint256)"(
    entranceFee: BigNumberish,
    _nursePart: BigNumberish,
    maxRewardCount: BigNumberish,
    duration: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  disapproveMaids(
    maids: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disapproveMaids(address)"(
    maids: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enter(
    id: BigNumberish,
    maids: string,
    maidId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enter(uint256,address,uint256)"(
    id: BigNumberish,
    maids: string,
    maidId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  enterWithPermitAll(
    id: BigNumberish,
    maids: string,
    maidId: BigNumberish,
    deadline: BigNumberish,
    v1: BigNumberish,
    r1: BytesLike,
    s1: BytesLike,
    v2: BigNumberish,
    r2: BytesLike,
    s2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enterWithPermitAll(uint256,address,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
    id: BigNumberish,
    maids: string,
    maidId: BigNumberish,
    deadline: BigNumberish,
    v1: BigNumberish,
    r1: BytesLike,
    s1: BytesLike,
    v2: BigNumberish,
    r2: BytesLike,
    s2: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exit(id: BigNumberish, overrides?: Overrides): Promise<ContractTransaction>;

  "exit(uint256)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  maidCafe(overrides?: CallOverrides): Promise<string>;

  "maidCafe()"(overrides?: CallOverrides): Promise<string>;

  maidCoin(overrides?: CallOverrides): Promise<string>;

  "maidCoin()"(overrides?: CallOverrides): Promise<string>;

  maidPowerToRaidReducedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "maidPowerToRaidReducedBlock()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maidsApproved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "maidsApproved(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nursePart(overrides?: CallOverrides): Promise<string>;

  "nursePart()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  raidCount(overrides?: CallOverrides): Promise<BigNumber>;

  "raidCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  raids(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      entranceFee: BigNumber;
      nursePart: BigNumber;
      maxRewardCount: BigNumber;
      duration: BigNumber;
      endBlock: BigNumber;
    }
  >;

  "raids(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      entranceFee: BigNumber;
      nursePart: BigNumber;
      maxRewardCount: BigNumber;
      duration: BigNumber;
      endBlock: BigNumber;
    }
  >;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rng(overrides?: CallOverrides): Promise<string>;

  "rng()"(overrides?: CallOverrides): Promise<string>;

  setMaidCafe(
    _maidCafe: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaidCafe(address)"(
    _maidCafe: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    approveMaids(maids: string, overrides?: CallOverrides): Promise<void>;

    "approveMaids(address)"(
      maids: string,
      overrides?: CallOverrides
    ): Promise<void>;

    challengers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        enterBlock: BigNumber;
        maids: string;
        maidId: BigNumber;
      }
    >;

    "challengers(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        enterBlock: BigNumber;
        maids: string;
        maidId: BigNumber;
      }
    >;

    changeMaidPowerToRaidReducedBlock(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeMaidPowerToRaidReducedBlock(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRNG(addr: string, overrides?: CallOverrides): Promise<void>;

    "changeRNG(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkDone(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "checkDone(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    create(
      entranceFee: BigNumberish,
      _nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "create(uint256,uint256,uint256,uint256,uint256)"(
      entranceFee: BigNumberish,
      _nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disapproveMaids(maids: string, overrides?: CallOverrides): Promise<void>;

    "disapproveMaids(address)"(
      maids: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enter(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "enter(uint256,address,uint256)"(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    enterWithPermitAll(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "enterWithPermitAll(uint256,address,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    exit(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "exit(uint256)"(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    maidCafe(overrides?: CallOverrides): Promise<string>;

    "maidCafe()"(overrides?: CallOverrides): Promise<string>;

    maidCoin(overrides?: CallOverrides): Promise<string>;

    "maidCoin()"(overrides?: CallOverrides): Promise<string>;

    maidPowerToRaidReducedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "maidPowerToRaidReducedBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maidsApproved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "maidsApproved(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nursePart(overrides?: CallOverrides): Promise<string>;

    "nursePart()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    raidCount(overrides?: CallOverrides): Promise<BigNumber>;

    "raidCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    raids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        entranceFee: BigNumber;
        nursePart: BigNumber;
        maxRewardCount: BigNumber;
        duration: BigNumber;
        endBlock: BigNumber;
      }
    >;

    "raids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        entranceFee: BigNumber;
        nursePart: BigNumber;
        maxRewardCount: BigNumber;
        duration: BigNumber;
        endBlock: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rng(overrides?: CallOverrides): Promise<string>;

    "rng()"(overrides?: CallOverrides): Promise<string>;

    setMaidCafe(_maidCafe: string, overrides?: CallOverrides): Promise<void>;

    "setMaidCafe(address)"(
      _maidCafe: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ChangeMaidPowerToRaidReducedBlock(value: null): EventFilter;

    Create(
      id: BigNumberish | null,
      entranceFee: null,
      nursePart: BigNumberish | null,
      maxRewardCount: null,
      duration: null,
      endBlock: null
    ): EventFilter;

    Enter(
      challenger: string | null,
      id: BigNumberish | null,
      maids: string | null,
      maidId: null
    ): EventFilter;

    Exit(challenger: string | null, id: BigNumberish | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    approveMaids(maids: string, overrides?: Overrides): Promise<BigNumber>;

    "approveMaids(address)"(
      maids: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    challengers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "challengers(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeMaidPowerToRaidReducedBlock(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeMaidPowerToRaidReducedBlock(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeRNG(addr: string, overrides?: Overrides): Promise<BigNumber>;

    "changeRNG(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkDone(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "checkDone(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    create(
      entranceFee: BigNumberish,
      _nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "create(uint256,uint256,uint256,uint256,uint256)"(
      entranceFee: BigNumberish,
      _nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    disapproveMaids(maids: string, overrides?: Overrides): Promise<BigNumber>;

    "disapproveMaids(address)"(
      maids: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enter(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enter(uint256,address,uint256)"(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    enterWithPermitAll(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "enterWithPermitAll(uint256,address,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    exit(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "exit(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    maidCafe(overrides?: CallOverrides): Promise<BigNumber>;

    "maidCafe()"(overrides?: CallOverrides): Promise<BigNumber>;

    maidCoin(overrides?: CallOverrides): Promise<BigNumber>;

    "maidCoin()"(overrides?: CallOverrides): Promise<BigNumber>;

    maidPowerToRaidReducedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "maidPowerToRaidReducedBlock()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maidsApproved(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "maidsApproved(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nursePart(overrides?: CallOverrides): Promise<BigNumber>;

    "nursePart()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    raidCount(overrides?: CallOverrides): Promise<BigNumber>;

    "raidCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    raids(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "raids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rng(overrides?: CallOverrides): Promise<BigNumber>;

    "rng()"(overrides?: CallOverrides): Promise<BigNumber>;

    setMaidCafe(_maidCafe: string, overrides?: Overrides): Promise<BigNumber>;

    "setMaidCafe(address)"(
      _maidCafe: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveMaids(
      maids: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveMaids(address)"(
      maids: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    challengers(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "challengers(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeMaidPowerToRaidReducedBlock(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeMaidPowerToRaidReducedBlock(uint256)"(
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeRNG(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeRNG(address)"(
      addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkDone(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkDone(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    create(
      entranceFee: BigNumberish,
      _nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "create(uint256,uint256,uint256,uint256,uint256)"(
      entranceFee: BigNumberish,
      _nursePart: BigNumberish,
      maxRewardCount: BigNumberish,
      duration: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    disapproveMaids(
      maids: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disapproveMaids(address)"(
      maids: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enter(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enter(uint256,address,uint256)"(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    enterWithPermitAll(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enterWithPermitAll(uint256,address,uint256,uint256,uint8,bytes32,bytes32,uint8,bytes32,bytes32)"(
      id: BigNumberish,
      maids: string,
      maidId: BigNumberish,
      deadline: BigNumberish,
      v1: BigNumberish,
      r1: BytesLike,
      s1: BytesLike,
      v2: BigNumberish,
      r2: BytesLike,
      s2: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exit(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(uint256)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    maidCafe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maidCafe()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maidCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maidCoin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maidPowerToRaidReducedBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maidPowerToRaidReducedBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maidsApproved(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maidsApproved(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nursePart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nursePart()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raidCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "raidCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "raids(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rng(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rng()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMaidCafe(
      _maidCafe: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaidCafe(address)"(
      _maidCafe: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
