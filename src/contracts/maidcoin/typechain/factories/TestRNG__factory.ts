/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestRNG, TestRNGInterface } from "../TestRNG";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "seed",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "generateRandomNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060e18061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806344a0a49114602d575b600080fd5b605f60383660046071565b50506040805142602080830191909152825180830382018152918301909252805191012090565b60405190815260200160405180910390f35b60008060408385031215608357600080fd5b8235915060208301356001600160a01b038116811460a057600080fd5b80915050925092905056fea2646970667358221220e0f2d82083ec4006da5d66db6726eb2d39b328a17dde09abf16d8e5c3e2d0d0864736f6c63430008050033";

export class TestRNG__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestRNG> {
    return super.deploy(overrides || {}) as Promise<TestRNG>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestRNG {
    return super.attach(address) as TestRNG;
  }
  connect(signer: Signer): TestRNG__factory {
    return super.connect(signer) as TestRNG__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestRNGInterface {
    return new utils.Interface(_abi) as TestRNGInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestRNG {
    return new Contract(address, _abi, signerOrProvider) as TestRNG;
  }
}
