/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ISupportableInterface extends ethers.utils.Interface {
  functions: {
    "changeSupportedPower(address,int256)": FunctionFragment;
    "checkSupportingRoute(address)": FunctionFragment;
    "setSupportingTo(address,uint256,uint256)": FunctionFragment;
    "shareRewards(uint256,address,uint8)": FunctionFragment;
    "supportedPower(uint256)": FunctionFragment;
    "supportingRoute(uint256)": FunctionFragment;
    "supportingTo(address)": FunctionFragment;
    "totalRewardsFromSupporters(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeSupportedPower",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSupportingRoute",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSupportingTo",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareRewards",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedPower",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportingRoute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportingTo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsFromSupporters",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeSupportedPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSupportingRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSupportingTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportingRoute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportingTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsFromSupporters",
    data: BytesLike
  ): Result;

  events: {
    "ChangeSupportedPower(uint256,int256)": EventFragment;
    "ChangeSupportingRoute(uint256,uint256)": EventFragment;
    "SupportTo(address,uint256)": EventFragment;
    "TransferSupportingRewards(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeSupportedPower"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeSupportingRoute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSupportingRewards"): EventFragment;
}

export class ISupportable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISupportableInterface;

  functions: {
    changeSupportedPower(
      supporter: string,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkSupportingRoute(
      supporter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSupportingTo(
      supporter: string,
      to: BigNumberish,
      amounts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shareRewards(
      pending: BigNumberish,
      supporter: string,
      supportingRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedPower(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportingRoute(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportingTo(
      supporter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalRewardsFromSupporters(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  changeSupportedPower(
    supporter: string,
    power: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkSupportingRoute(
    supporter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSupportingTo(
    supporter: string,
    to: BigNumberish,
    amounts: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shareRewards(
    pending: BigNumberish,
    supporter: string,
    supportingRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedPower(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportingRoute(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportingTo(
    supporter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalRewardsFromSupporters(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    changeSupportedPower(
      supporter: string,
      power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSupportingRoute(
      supporter: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    setSupportingTo(
      supporter: string,
      to: BigNumberish,
      amounts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shareRewards(
      pending: BigNumberish,
      supporter: string,
      supportingRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & {
        nurseOwner: string;
        amountToNurseOwner: BigNumber;
      }
    >;

    supportedPower(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportingRoute(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportingTo(
      supporter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRewardsFromSupporters(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ChangeSupportedPower(
      id?: BigNumberish | null,
      power?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { id: BigNumber; power: BigNumber }
    >;

    ChangeSupportingRoute(
      from?: BigNumberish | null,
      to?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { from: BigNumber; to: BigNumber }
    >;

    SupportTo(
      supporter?: string | null,
      to?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { supporter: string; to: BigNumber }
    >;

    TransferSupportingRewards(
      supporter?: string | null,
      id?: BigNumberish | null,
      amounts?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { supporter: string; id: BigNumber; amounts: BigNumber }
    >;
  };

  estimateGas: {
    changeSupportedPower(
      supporter: string,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkSupportingRoute(
      supporter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSupportingTo(
      supporter: string,
      to: BigNumberish,
      amounts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shareRewards(
      pending: BigNumberish,
      supporter: string,
      supportingRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedPower(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportingRoute(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportingTo(
      supporter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRewardsFromSupporters(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeSupportedPower(
      supporter: string,
      power: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkSupportingRoute(
      supporter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSupportingTo(
      supporter: string,
      to: BigNumberish,
      amounts: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shareRewards(
      pending: BigNumberish,
      supporter: string,
      supportingRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedPower(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportingRoute(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportingTo(
      supporter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardsFromSupporters(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
